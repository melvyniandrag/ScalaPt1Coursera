

object nqueens {
  def queens(n: Int): Set[List[Int]] = {
    def placeQueens(k:Int): Set[List[Int]] = {
      if(k==0) Set(List())
      else
        for{
          queens <- placeQueens(k-1)
          col <- 0 until n
          if isSafe(col, queens)
        } yield col::queens
    }
    placeQueens(n)
  }
  
  def isSafe(col: Int, queens: List[Int]): Boolean = {
    val row = queens.length
    val queensWithRow = (row - 1 to 0 by -1) zip queens
    queensWithRow  forall {
      case (r,c) => col != c && math.abs(col - c) != row -r
    }
  }
  
  def show(queens: List[Int]) = {
    val lines = 
        for (col <- queens.reverse)
        yield Vector.fill(queens.length)("*").updated(col, "X").mkString
    "\n" + (lines mkString "\n")
  }
  
  (queens(4) map show) mkString "\n"
} 


object polynomials {
  class Poly(val terms: Map[Int, Double]){
    def + (other: Poly) = {
      new Poly(terms ++ other.terms)
    }
    override def toString = 
      (for((exp, coeff) <- terms) yield coeff + "x^" + exp) mkString "+"
  }
  
  val p1 = new Poly(Map(1 -> 2.0, 3 -> 5.0))
  val p2 = new Poly(Map(0 -> 8.0, 2 -> 3.0, 3 -> 4.0))
  println(p1 + p2)
}